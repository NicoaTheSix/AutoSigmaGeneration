You are a senior cybersecurity detection engineer with expertise in threat detection, MITRE ATT&CK TTPs, and writing Sigma rules. Your task is to write Sigma detection rules based on the following inputs, which include attack descriptions, procedures, and detection patterns.

You will follow a multi-step process where you will be given TTP context, attack procedures, current detection methods, and our proprietary event log format. Your final task will be to write a Sigma rule tailored to our log format.

---------------------------------------------------------------------------

The MITRE ATT&CK technique we want to detect is:

TTP Name: Phishing: Spearphishing Attachment  
TTP ID: T1566.001  
Description:  
Adversaries may send spearphishing emails with a malicious attachment in an attempt to gain access to victim systems. Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon User Execution to gain execution.[1] Spearphishing may also involve social engineering techniques, such as posing as a trusted source.

There are many options for the attachment such as Microsoft Office documents, executables, PDFs, or archived files. Upon opening the attachment (and potentially clicking past protections), the adversary's payload exploits a vulnerability or directly executes on the user's system. The text of the spearphishing email usually tries to give a plausible reason why the file should be opened, and may explain how to bypass system protections in order to do so. The email may also contain instructions on how to decrypt an attachment, such as a zip file password, in order to evade email boundary defenses. Adversaries frequently manipulate file extensions and icons in order to make attached executables appear to be document files, or files exploiting one application appear to be a file for a different one.
 

Please analyze this TTP and summarize the key suspicious behaviors or indicators typically associated with this technique.

---------------------------------------------------------------------------

Here are procedure examples that are known to trigger this TTP:

- admin@338 has sent emails with malicious Microsoft Office documents attached.  
- APT28 sent spearphishing emails containing malicious Microsoft Office and RAR attachments.  
- APT29 has used spearphishing emails with an attachment to deliver files with exploits to initial victims.

Please identify the behavioral patterns from these examples and relate them to the technique described above.

---------------------------------------------------------------------------

Likely attack patterns for T1566.001 (Spearphishing Attachment) may include:

- A user opens a browser (e.g., Chrome, Edge, Firefox) to access webmail (e.g., Gmail, Outlook Web).
- The browser initiates TCP connections to mail/file servers (e.g., TCP Connect, TCP Receive).
- A file is downloaded and saved to disk via CreateFile or WriteFile, with extensions like .exe, .js, .docm, .zip, .rar. 
- The filename may not contain full folder paths such as Downloads or AppData.
- Execution might **not happen immediately** — the presence of delivery alone is meaningful.
- Later, Office or viewer apps may open the file or spawn child processes like powershell.exe. 

Please keep these scenarios in mind when constructing detection logic for this technique.

---------------------------------------------------------------------------

The following detection techniques are commonly used to identify this TTP:

[(source="o365_audit" OR source="gmail_logs" OR source="email_gateway")| where (spf="fail" OR dkim="fail" OR dmarc="fail")| where (attachment IN ("docm", "exe", "vbs", "js", "zip"))| where (subject="invoice" OR subject="urgent action required" OR subject="account security update")| eval risk_score=case( spf="fail" AND dkim="fail", 9, attachment IN ("exe", "js", "vbs"), 8, subject IN ("invoice", "security update"), 7)| where risk_score >= 7| stats count by _time, sender, recipient, subject, risk_score
(EventCode=11 OR source="/var/log/audit/audit.log" type="open")| where (file_type IN ("exe", "vbs", "js", "docm", "lnk"))| where (process_path="C:\Users\\Downloads\" OR process_path="/home//Downloads/")| eval risk_score=case( like(file_name, "%.exe"), 8, like(file_name, "%.js"), 9, like(file_name, "%.vbs"), 7)| where risk_score >= 7| stats count by _time, host, user, file_name, process_path, risk_score
(EventCode=3) OR (source="zeek_http_logs" uri IN (malicious_url_list)) OR (source="proxy_logs" url IN (malicious_url_list))| eval risk_score=case( domain IN ("bit.ly", "tinyurl.com"), 8, domain IN (".xyz", ".top"), 7, uri IN (malicious_url_list), 9)| where risk_score >= 7| stats count by _time, host, user, uri, domain, risk_score] 

Please analyze these detection methods and explain how they help catch the TTP behaviors from Step 2 and 3.

---------------------------------------------------------------------------

Our detection events follow this schema:

Each event contains:
- srcNode: The source entity (usually a process)
  - Fields: UUID, Name, Image, Cmdline, Type, Pid
- dstNode: The destination entity (may be null or Process, File, Registry, or Network)
  - Fields: UUID, Name or Path or Key, Image, Cmdline, Dstaddress, Port, Type
- relation: Describes the action from source to destination
  - Possible values:
    - File: CreateFile, WriteFile, ReadFile, CloseFile, etc.
    - Process: Process Start, Process Create
    - Network: TCP Connect, TCP Send, UDP Receive, etc.
    - Registry: RegOpenKey, RegSetValue, RegQueryValue, etc.
- timestamp: UNIX timestamp
- label: Ground-truth label (e.g., benign or TTP ID)

Example event:
{
  "srcNode": {
    "Image": "C:\\Windows\\system32\\svchost.exe",
    "Cmdline": "C:\\Windows\\system32\\svchost.exe -k DcomLaunch -p",
    "Type": "Process"
  },
  "dstNode": {
    "Image": "C:\\Windows\\system32\\backgroundTaskHost.exe",
    "Cmdline": "\"C:\\Windows\\system32\\backgroundTaskHost.exe\" -ServerName:...",
    "Type": "Process"
  },
  "relation": "Process Create"
}

---------------------------------------------------------------------------

Now, based on the above information, please generate a complete Sigma rule in valid YAML format.

Special instructions:
- Include detection logic not only for file **execution** (e.g., Office spawning PowerShell), but also for **delivery behaviors**, such as:
  - TCP connections from browsers
  - CreateFile or WriteFile to risky file extensions
  - Even if no folder path is present, file extension alone may indicate risk

- You may define multiple detection blocks (e.g., browser_tcp, delivery_write, office_spawn) and use or conditions to combine them

- Matching logic may use |endswith, |contains, |startswith depending on the field

- When writing detection logic, use our field names such as:
  - srcNode.Image, srcNode.Cmdline, dstNode.Name, dstNode.Type, relation

---------------------------------------------------------------------------

Your output must include the following fields:

- title or name
- id: A randomly generated UUID
- description
- status: production
- author: auto-generated
- date: Use today’s date in YYYY-MM-DD format
- logsource:
  - category: custom
  - product: windows
- detection: with at least 2–3 detection branches for different phases
- condition: combine relevant detections using or
- tags: Include ATT&CK ID (e.g., attack.T1566.001) and tactic (e.g., initial_access)
- references: Optional
- level: high / medium / low

Output only the YAML rule inside a Markdown code block using triple backticks and yaml.   
Do not include explanations, JSON examples, or extra commentary. 